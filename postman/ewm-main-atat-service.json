{
  "info": {
    "_postman_id": "1b12f39d-a514-42d9-99a1-2d2f4026b8e8",
    "name": "\"Explore with me\" API ??????????",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23073145"
  },
  "item": [
    {
      "name": "?????????? ?????????? ? ???, ??? ? ????????? ??? ??????",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let post;\r",
              "    try {\r",
              "        post = rnd.getPost();\r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(post),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 201 ? ?????? ? ??????? json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/hit",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "hit"
          ]
        },
        "description": "?????????? ?????????? ? ???, ??? ?? uri ??????????? ??????? ??? ????????? ?????? ?????????????. ???????? ???????, uri ? ip ???????????? ??????? ? ???? ???????."
      },
      "response": []
    },
    {
      "name": "????????? ?????????? ?? ??????????. ???????? ????????: ???????? ???? ? ??????? ????? ???????????? (???????? ????????? java.net.URLEncoder.encode)(???? ?? /events/{id})",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {      \r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"uri\", '/events/' + event.id);\r",
              "\r",
              "        pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events/\" + event.id,\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "                url : \"http://localhost:9090/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events/\" + event.id.toString() + \"&unique=false\",\r",
              "                method : \"GET\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                pm.collectionVariables.set('source', response.json());\r",
              "                pm.sendRequest({\r",
              "                    url : \"http://localhost:8080/events/\" + event.id,\r",
              "                    method : \"GET\",\r",
              "                    header: { \"Content-Type\": \"application/json\" }\r",
              "                });\r",
              "            });\r",
              "        });\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 200 ? ?????? ? ??????? json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json()[0];\r",
              "\r",
              "pm.test(\"????? ?????? ????????? ????: app, uri, hits\", function () {\r",
              "    pm.expect(target).to.have.all.keys('app', 'uri', 'hits');\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get(\"source\")[0];\r",
              "\r",
              "\r",
              "pm.test(\"????? ?????????? ??????? GET /events/{id} ?????? ??????????? ?????????? ?????.\", function(){\r",
              "    pm.expect(source.hits + 1).equal(target.hits, '?????????? ????? ????? ?????????? ??????? GET /events/{id} ?????? ???? ?????? ?? 1.');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris={{uri}}&unique=false",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "stats"
          ],
          "query": [
            {
              "key": "start",
              "value": "2020-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ?????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "end",
              "value": "2035-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "uris",
              "value": "{{uri}}",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????"
            },
            {
              "key": "unique",
              "value": "false",
              "description": "????? ?? ????????? ?????? ?????????? ????????? (?????? ? ?????????? ip)"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "???? ?????????????? ????????",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {      \r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event1 = await api.publishEvent(event1.id);\r",
              "        let event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event2 = await api.publishEvent(event2.id);\r",
              "        pm.collectionVariables.set(\"uri\", '/events/' + event1.id + '&uris=/events/' + event2.id);\r",
              "\r",
              "        pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events/\" + event1.id,\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events/\" + event2.id,\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                pm.sendRequest({\r",
              "                    url : \"http://localhost:8080/events/\" + event2.id,\r",
              "                    method : \"GET\",\r",
              "                    header: { \"Content-Type\": \"application/json\" }\r",
              "                }, (error, response) => {\r",
              "                });\r",
              "            });\r",
              "        });\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 200 ? ?????? ? ??????? json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"????? ?????? ????????? ????: app, uri, hits\", function () {\r",
              "    pm.expect(target[0]).to.have.all.keys('app', 'uri', 'hits');\r",
              "    pm.expect(target[1]).to.have.all.keys('app', 'uri', 'hits');\r",
              "});\r",
              "\r",
              "pm.test(\"? ???? ?????? ?????? ??????????? ?????????? ?? ???????? ?????????? ??????????\", function(){\r",
              "    pm.expect(target[0].hits).to.be.above(target[1].hits);\r",
              "});\r",
              "\r",
              "pm.test(\"???????? ???????????? ????????? ?????????? ?????????? ??????? ? ??????????? ?????\", function(){\r",
              "    pm.expect(target[0].hits).equal(2);\r",
              "    pm.expect(target[1].hits).equal(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris={{uri}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "stats"
          ],
          "query": [
            {
              "key": "start",
              "value": "2020-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ?????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "end",
              "value": "2035-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "uris",
              "value": "{{uri}}",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????"
            },
            {
              "key": "uris",
              "value": "aliqua o",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????",
              "disabled": true
            },
            {
              "key": "unique",
              "value": "false",
              "description": "????? ?? ????????? ?????? ?????????? ????????? (?????? ? ?????????? ip)",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "????????? ?????????? ?? ??????????. ???????? ????????: ???????? ???? ? ??????? ????? ???????????? (???????? ????????? java.net.URLEncoder.encode)(???? ?? /events)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {    \r",
              "        pm.collectionVariables.set(\"uri\", '/events');  \r",
              "        \r",
              "        pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events\",\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            \r",
              "            pm.sendRequest({\r",
              "                url : \"http://localhost:9090/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events&unique=false\",\r",
              "                method : \"GET\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                pm.collectionVariables.set('source', response.json());\r",
              "                pm.sendRequest({\r",
              "                    url : \"http://localhost:8080/events\",\r",
              "                    method : \"GET\",\r",
              "                    header: { \"Content-Type\": \"application/json\" }\r",
              "                });\r",
              "            });\r",
              "        });\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 200 ? ?????? ? ??????? json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json()[0];\r",
              "\r",
              "pm.test(\"????? ?????? ????????? ????: app, uri, hits\", function () {\r",
              "    pm.expect(target).to.have.all.keys('app', 'uri', 'hits');\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get(\"source\")[0];\r",
              "\r",
              "\r",
              "pm.test(\"????? ?????????? ??????? GET /events ?????? ??????????? ?????????? ?????.\", function(){\r",
              "    pm.expect(source.hits + 1).equal(target.hits, '?????????? ????? ????? ?????????? ??????? GET /events ?????? ???? ?????? ?? 1.');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&uris={{uri}}&unique=false",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "stats"
          ],
          "query": [
            {
              "key": "start",
              "value": "2020-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ?????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "end",
              "value": "2023-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "uris",
              "value": "{{uri}}",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????"
            },
            {
              "key": "unique",
              "value": "false",
              "description": "????? ?? ????????? ?????? ?????????? ????????? (?????? ? ?????????? ip)"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "????????? ?????????? ?? ??????????. (???? ?? ?????????????? ? ?????? ????????? uris)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {    \r",
              "        pm.collectionVariables.set(\"uri\", '/events');\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events\",\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "                pm.sendRequest({\r",
              "                    url : \"http://localhost:8080/events/\" + event.id,\r",
              "                    method : \"GET\",\r",
              "                    header: { \"Content-Type\": \"application/json\" }\r",
              "                }, (error, response) => {\r",
              "                    pm.sendRequest({\r",
              "                        url : \"http://localhost:9090/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&unique=false\",\r",
              "                        method : \"GET\",\r",
              "                        header: { \"Content-Type\": \"application/json\" }\r",
              "                    }, (error, response)=>{ \r",
              "                        pm.collectionVariables.set('source', response.json());\r",
              "                    });\r",
              "            });\r",
              "        });\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 200 ? ?????? ? ??????? json ??? ??????? ??? ????????????? ????????? uris\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "const source = pm.collectionVariables.get('source');\r",
              "console.log(target)\r",
              "console.log(source)\r",
              "pm.test(\"????? ?????? ????????? ????: app, uri, hits\", function () {\r",
              "    pm.expect(target[0]).to.have.all.keys('app', 'uri', 'hits');\r",
              "    pm.expect(source[0]).to.have.all.keys('app', 'uri', 'hits');\r",
              "    pm.expect(source[1]).to.have.all.keys('app', 'uri', 'hits');\r",
              "});\r",
              "\r",
              "pm.test(\"??? ??????? ?? ??????????? uris ?????? ???????? 1 ??????\", function () {\r",
              "    pm.expect(target.length).to.equal(1);\r",
              "});\r",
              "\r",
              "pm.test(\"??? ??????? ??? uris ?????? ???????? ?????? 1 ??????\", function () {\r",
              "    pm.expect(source.length).to.be.above(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&uris={{uri}}&unique=false",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "stats"
          ],
          "query": [
            {
              "key": "start",
              "value": "2020-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ?????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "end",
              "value": "2023-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "uris",
              "value": "{{uri}}",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????"
            },
            {
              "key": "uris",
              "value": "aliqua o",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????",
              "disabled": true
            },
            {
              "key": "unique",
              "value": "false",
              "description": "????? ?? ????????? ?????? ?????????? ????????? (?????? ? ?????????? ip)"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "????????? ?????????? ?? ??????????. (???? ?? ?????????????? ? ?????? ????????? unique)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {    \r",
              "        pm.collectionVariables.set(\"uri\", '/events');  \r",
              "        \r",
              "        pm.sendRequest({\r",
              "            url : \"http://localhost:8080/events\",\r",
              "            method : \"GET\",\r",
              "            header: { \"Content-Type\": \"application/json\" }\r",
              "        }, (error, response) => {\r",
              "            pm.sendRequest({\r",
              "                url : \"http://localhost:8080/events\",\r",
              "                method : \"GET\",\r",
              "                header: { \"Content-Type\": \"application/json\" }\r",
              "            }, (error, response) => {\r",
              "                \r",
              "                pm.sendRequest({\r",
              "                    url : \"http://localhost:9090/stats?start=2020-05-05 00:00:00&end=2035-05-05 00:00:00&uris=/events&unique=true\",\r",
              "                    method : \"GET\",\r",
              "                    header: { \"Content-Type\": \"application/json\" }\r",
              "                }, (error, response) => {\r",
              "                    pm.collectionVariables.set('source', response.json());\r",
              "                });\r",
              "            });\r",
              "        });\r",
              "    } catch(err) {\r",
              "        console.error(\"?????? ??? ?????????? ???????? ??????.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"????? ?????? ????????? ??? ??????? 200 ? ?????? ? ??????? json ??? ??????? ??? ????????????? ????????? unique\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json()[0];\r",
              "\r",
              "pm.test(\"????? ?????? ????????? ????: app, uri, hits\", function () {\r",
              "    pm.expect(target).to.have.all.keys('app', 'uri', 'hits');\r",
              "});\r",
              "\r",
              "const source = pm.collectionVariables.get(\"source\")[0];\r",
              "\r",
              "pm.test(\"?????????? ?????????? ?????????? ? ?????? ip ?????? ????????? 1\", function () {\r",
              "    pm.expect(source.hits == 1);\r",
              "})\r",
              "\r",
              "pm.test(\"?????????? ?????????? ? ?????? ip ?????? ???? ?????? 1\", function () {\r",
              "    pm.expect(target.hits > 1);\r",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stats?start=2020-05-05 00:00:00&end=2023-05-05 00:00:00&uris={{uri}}&unique=false",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "stats"
          ],
          "query": [
            {
              "key": "start",
              "value": "2020-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ?????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "end",
              "value": "2023-05-05 00:00:00",
              "description": "(Required) ???? ? ????? ????? ????????? ?? ??????? ????? ????????? ?????????? (? ??????? \"yyyy-MM-dd HH:mm:ss\")"
            },
            {
              "key": "uris",
              "value": "{{uri}}",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????"
            },
            {
              "key": "uris",
              "value": "aliqua o",
              "description": "?????? uri ??? ??????? ????? ????????? ??????????",
              "disabled": true
            },
            {
              "key": "unique",
              "value": "false",
              "description": "????? ?? ????????? ?????? ?????????? ????????? (?????? ? ?????????? ip)"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:9090\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addPost(post, verbose=null) {",
          "        return this.post(\"/hit\", post, \"?????? ??? ?????????? ?????????? ? ??????? ? ?????????: \", verbose);",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"http://localhost:8080\", \"?????? ??? ?????????? ?????? ????????????: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"http://localhost:8080\", \"?????? ??? ?????????? ????? ?????????: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"http://localhost:8080\", \"?????? ??? ?????????? ?????? ???????: \", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"},\"?????? ??? ?????????? ???????\", verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"?????? ??? ?????????? patch-???????: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, \"http://localhost:8080\", body, errorText);",
          "    }",
          "",
          "    async post(path, body, newBaseUrl=null, errorText = \"?????? ??? ?????????? post-???????: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, newBaseUrl, body, errorText);",
          "    }",
          "",
          "    async sendRequest(method, path, newBaseUrl=null, body=null, errorText = \"?????? ??? ?????????? ???????: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            let request;",
          "            if (newBaseUrl==null)",
          "                 request = {",
          "                    url: this.baseUrl + path,",
          "                    method: method,",
          "                    body: body == null ? \"\" : JSON.stringify(body),",
          "                    header: { \"Content-Type\": \"application/json\" },",
          "                };",
          "            else",
          "                request = {",
          "                    url: newBaseUrl + path,",
          "                    method: method,",
          "                    body: body == null ? \"\" : JSON.stringify(body),",
          "                    header: { \"Content-Type\": \"application/json\" },",
          "                };",
          "",
          "            if(verbose) {",
          "                console.log(\"????????? ??????: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"??? ?????????? ??????? ? ??????? ???????? ?????.\\n\", err,",
          "                             \"\\n??? ??????? ???????? ????????? ????? ?? ?????? ? ????? ????????? \" + ",
          "                             \"?? ????????? ??????????. ?????? ???????:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"????????? ????????? ???????: ??? ????????? - \", response.code, \", ????: \", response.json());",
          "                    }",
          "                    try{",
          "                        resolve(response.json());",
          "                    } catch(err){",
          "                        resolve(response);",
          "                    }",
          "                    ",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getPost() {",
          "        return {",
          "            app: \"ewm-main-service\",",
          "            uri: \"/events/\" + pm.variables.replaceIn('{{$randomInt}}'),",
          "            ip: pm.variables.replaceIn('{{$randomIP}}'),",
          "            timestamp: this.getPastDateTime()",
          "        }",
          "    }",
          "",
          "     getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getPastDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.subtract(hourShift, 'hour');",
          "        m.subtract(minuteShift, 'minute');",
          "        m.subtract(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:9090",
      "type": "string"
    },
    {
      "key": "uri",
      "value": "1"
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}